#!/usr/bin/env bash

export NIX_VERSION=1.11.2
export NIX_VERSION_FULL=nix-$NIX_VERSION-x86_64-linux
export USER=$(whoami)

indent() {
  sed -u 's/^/       /'
}

trap 'err_handler $?' ERR

err_handler() {
  trap - ERR
  let i=0 exit_status=$1
  echo "Aborting on error $exit_status:"
  echo "--------------------"
  while caller $i; do ((i++)); done
  exit $exit_status
}

topic() {
  echo "-----> $*"
}

fetch() {
  curl -sSfL -o "$1" "$2"
}

# download_and_install() {
#   CACHE_DIR="$1"
#   BUILD_DIR="$2"
#   if [ -x "$CACHE_DIR/bin/$3" ]; then
#     topic "$3 found in cache"
#   else
#     topic "Downloading $3"
#     mkdir -p $CACHE_DIR/bin
#     cd $CACHE_DIR/bin
#     fetch $3 $4
#     chmod u+x $3
#   fi
#   mkdir -p $BUILD_DIR/bin
#   cp -f $CACHE_DIR/bin/$3 $BUILD_DIR/bin/$3
# }

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

suppress_locale_warnings() {
  export LANG="C"
  export LC_ALL="C"
}

copy_custom_nix_config() {
  if [ -e $BUILD_DIR/.nixpkgs/config.nix ]; then
    mkdir -p $HOME/.nixpkgs
    cp $BUILD_DIR/.nixpkgs/config.nix $HOME/.nixpkgs/config.nix
  fi
}

install_nix() {
  copy_custom_nix_config

  if [ ! -e $HOME/.nix-defexpr/channels/nixpkgs ]; then
    cd /nix
    topic "Installing nix $NIX_VERSION"
    ./install 2>&1| indent
  else
    topic "Nix found"
  fi
}
